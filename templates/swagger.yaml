swagger: "2.0"
info:
  description: "遠隔療養者モニタリングシステムのAPIです。"
  version: "1.0.0"
  title: "Remote Patient Monitoring System API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "hal@code4japan.org"
  license:
    name: "MIT License"
    url: "https://github.com/codeforjapan/remote-patient-monitoring-api/blob/main/LICENSE"

produces:
  - application/json

consumes:
  - application/json

paths:
  /api/center/:
    get:
      #security:
      #  - api-authorizer: []
      summary: get centers.
      description: get all centers.
      tags:
        - center
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
          schema:
            type: array
            items:
              $ref: "#/definitions/produceCenterModel"
        400:
          description: Bad Request
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
          schema:
            $ref: "#/definitions/error"
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
          schema:
            $ref: "#/definitions/error"
      x-amazon-apigateway-integration:
        type: aws_proxy
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "BAD.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "INT.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: "arn:aws:apigateway:#{AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:remote-patient-monitoring-getCenters-dev/invocations"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
    post:
      summary: Create a new center.
      description: Create a new center.
      tags:
        - center
      parameters:
        - in: body
          schema:
            $ref: "#/definitions/consumeCenterModel"
          name: centerModel
          description: center model which you want to create.
          required: true
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
          schema:
            $ref: "#/definitions/produceCenterModel"
        400:
          description: Bad Request
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
          schema:
            $ref: "#/definitions/error"
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
          schema:
            $ref: "#/definitions/error"
      x-amazon-apigateway-integration:
        type: aws_proxy
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "BAD.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "INT.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: "arn:aws:apigateway:#{AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:remote-patient-monitoring-postCenter-dev/invocations"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
  /api/center/{centerId}:
    get:
      summary: "保健所ID"
      description: "指定されたcenterIdの保健所情報を返します"
      tags:
        - center
      parameters:
        - name: "centerId"
          in: "path"
          description: "取得したい保健所のID"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
          schema:
            $ref: "#/definitions/produceCenterModel"
        400:
          description: Bad Request
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
          schema:
            $ref: "#/definitions/error"
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
          schema:
            $ref: "#/definitions/error"
      x-amazon-apigateway-integration:
        type: aws_proxy
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "BAD.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "INT.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: "arn:aws:apigateway:#{AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:remote-patient-monitoring-getCenter-dev/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
    put:
      summary: "保健所の更新"
      description: "指定されたcenterIdの保健所情報を更新します"
      tags:
        - center
      parameters:
        - name: "centerId"
          in: "path"
          description: "更新したい保健所のID"
          required: true
          type: "integer"
          format: "int64"
        - in: body
          schema:
            $ref: "#/definitions/consumeCenterModel"
          name: centerModel
          description: center model which you want to update.
          required: true
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
          schema:
            $ref: "#/definitions/produceCenterModel"
        400:
          description: Bad Request
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
          schema:
            $ref: "#/definitions/error"
        500:
          description: Internal error
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
          schema:
            $ref: "#/definitions/error"
      x-amazon-apigateway-integration:
        type: aws_proxy
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "BAD.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "INT.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: "arn:aws:apigateway:#{AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:remote-patient-monitoring-putCenter-dev/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
definitions:
  consumeCenterModel:
    type: "object"
    properties:
      centerName:
        type: "string"
  error:
    type: object
    properties:
      errorCode:
        type: "string"
      errorMessage:
        type: "string"
  produceCenterModel:
    type: "object"
    properties:
      centerId:
        type: "integer"
        format: "int64"
      centerName:
        type: "string"
# securityDefinitions:
#   api-authorizer:
#     type: "apiKey"
#     name: "Authorization"
#     in: "header"
#     x-amazon-apigateway-authtype: "oauth2"
#     x-amazon-apigateway-authorizer:
#       type: token
#       authorizerUri: "arn:aws:apigateway:#{AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:auth/invocations"
#       authorizerCredentials: "arn:aws:iam::#{AWS::AccountId}:role"
#       identityValidationExpression: "^x-[a-z]+"
#       authorizerResultTtlInSeconds: 60
# components:
#   securitySchemes:
#     jwt-authorizer-oauth:
#       type: oauth2
#       x-amazon-apigateway-authorizer:
#         type: jwt
#         jwtConfiguration:
#           issuer: "https://cognito-idp.region.amazonaws.com/userPoolId"
#           audience:
#             - audience1
#             - audience2
#         identitySource: $request.header.Authorization
